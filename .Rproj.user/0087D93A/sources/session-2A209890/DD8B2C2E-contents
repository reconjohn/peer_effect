# data
## get the Seattle ACS and technology adoptions 

load("./data/ACS.Rdata") # WA_acs_prop, WA_tracts, seattle_tracts, bellevue_tracts
load("./data/Seattle_Data.Rdata") # PV, EV, Pump, Total_Permit
source("./syntax/Function.R")

# filling missing value, homevalue
imp <- lm(HomeValue ~ Income + Edu, seattle_tracts)
estimated_value <- predict(imp, newdata = seattle_tracts[is.na(seattle_tracts$HomeValue),])
seattle_tracts[is.na(seattle_tracts$HomeValue), "HomeValue"] <- estimated_value

# # classify geoid with similar characteristics 
  # fa <- fa(seattle_tracts[,4:12] %>%
  #            st_drop_geometry(),nfactors=4,rotate="oblimin",fm="ml")
  # # print(fa)
  # fa.diagram(fa,simple=T)
  # 
  # set.seed(59)
  # kme <- kmeans(as.data.frame(fa$scores), center=3, iter.max = 10)
  # 
  # as.data.frame(fa$scores) %>%
  #   cbind(as.character(kme$cluster)) %>%
  #   gather(key,value,ML2:ML4) %>%
  #   rename(cluster = "as.character(kme$cluster)") %>%
  #   ggplot(aes(x=cluster,y=value))+
  #   geom_boxplot()+
  #   facet_wrap(~ key) #1,5,2,3,4
  # 
  # seattle_tracts <- seattle_tracts %>%
  #   mutate(cluster = parse_factor(as.character(kme$cluster),
  #                               levels = c("2","1","3")),
  #        cluster = dplyr::recode(cluster,
  #                                "2" = "1", "1" = "2", "3" = "3"))
  # brewer <- viridis_pal(option = "D",direction = -1)(7)
  # seattle_tracts %>%
  #   mutate(cluster = factor(cluster)) %>%
  #   ggplot() +
  #   geom_sf(aes(fill = cluster)) +
  #   scale_color_manual(values = brewer) +
  #   scale_fill_manual(values = brewer) +
  #   theme_minimal()



### building stock clearing 
library(geojsonsf)
# whole washington building polygon data upload
file <- geojson_sf("./data/Washington.geojson")

# change crs 
file <- file %>% 
  st_transform(crs = 4269)

# add area to identify residential buildings 
sf::sf_use_s2(FALSE) # if Error in s2_geography_from_wkb(x, oriented = oriented, check = check) : 
file$area <- st_area(file) # mean area of a building, and 3rd quantile are 235 and 241 square meter


# remove over 1000 square meter buildings (only for residential housing), average multifamily housing size is 
file.residential <- file %>% 
  mutate(area = as.numeric(area)) %>% 
  filter(area < 1000)


# cutting to Seattle
wa <- places("WA", year = 2018, class = "sf") 
seattle <- 
  wa %>%
  filter(NAME == "Seattle")
# data <- ms_clip(file.residential, seattle, remove_slivers = TRUE)
data <- st_intersection(file.residential, seattle)

# polygon to point
sf::sf_use_s2(FALSE)

dat <- data %>% 
  st_centroid() %>% 
  st_coordinates() # X and Y for all housing in Seattle

# join to have all housing with and without PV installed in Seattle 

# find duplicated rows 
PV[duplicated(PV[,6:7]),] # 3,202 out of 3,370; 168 observations are duplicated. 

PV <- PV %>% 
  distinct(Lon, Lat, .keep_all = TRUE)

pv.sea <- dat %>% 
  as.data.frame() %>% 
  full_join(PV, by = c('X'='Lon', 'Y' = 'Lat')) # 3,202 PV installed out of total 185,960 housings


# join with ACS
PV.sea <- st_as_sf(pv.sea, coords = c("X", "Y"), crs = 4326,
                   agr = "constant",
                   stringsAsFactors = FALSE,
                   remove = TRUE)

# st_crs(PV)
census <- seattle_tracts %>% st_transform(4326)


in_tract <- st_join(PV.sea, census, join = st_within)
# join sf objects based on geometry, point data joined with polygons  


################################ EV
EV[duplicated(EV[,6:7]),] # 725 out of 745; 20 observations are duplicated. 

EV <- EV %>% 
  distinct(Lon, Lat, .keep_all = TRUE)

ev.sea <- dat %>% 
  as.data.frame() %>% 
  full_join(EV, by = c('X'='Lon', 'Y' = 'Lat')) # 725 EV installed out of total 185,960 housings


# join with ACS
EV.sea <- st_as_sf(ev.sea, coords = c("X", "Y"), crs = 4326,
                   agr = "constant",
                   stringsAsFactors = FALSE,
                   remove = TRUE)

# st_crs(PV)
census <- seattle_tracts %>% st_transform(4326)


in_tract <- st_join(EV.sea, census, join = st_within)
# join sf objects based on geometry, point data joined with polygons  


################################ Pump
Pump[duplicated(Pump[,5:6]),] # 180 out of 4779; 180 observations are duplicated. 

Pump <- Pump %>% 
  distinct(Lon, Lat, .keep_all = TRUE)

pump.sea <- dat %>% 
  as.data.frame() %>% 
  full_join(Pump, by = c('X'='Lon', 'Y' = 'Lat')) # 4,599 Pump installed out of total 187,357 housings


# join with ACS
Pump.sea <- st_as_sf(pump.sea, coords = c("X", "Y"), crs = 4326,
                     agr = "constant",
                     stringsAsFactors = FALSE,
                     remove = TRUE)

# st_crs(PV)
census <- seattle_tracts %>% st_transform(4326)


in_tract <- st_join(Pump.sea, census, join = st_within)
# join sf objects based on geometry, point data joined with polygons  

################################################################################
in_tract <- in_tract %>% 
  filter(!is.na(GEOID)) %>%  # remove NA for geoid; now 185,380 for PV, 182,909 for EV, 4,584 out of 186,768 for Pump
  mutate(adopter = ifelse(is.na(Year), 0, 1)) # identify adopters

# # mappting to check 
# in_tract %>% 
#   filter(adopter ==1) %>% 
#   ggplot() +
#   geom_sf(fill = "black") 

# convert coordinate for analysis 
lonlat2UTM = function(lonlat) {
  utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
  if(lonlat[2] > 0) {
    utm + 32600
  } else{
    utm + 32700
  }
}

coords_example = c(-122.2663,47.55692)
EPSG_2_UTM <- lonlat2UTM(coords_example)
# To see the UTM
st_crs(EPSG_2_UTM)$proj4string

proj = st_transform(st_as_sf(in_tract), EPSG_2_UTM) # 3,196 adopters for PV, 725 for EV, 4,584 for Pump

################################################################################
# ## Cluster
# # choose a year
# # count neighor adopters for each adopter
# # for cluster of each adopter, randomly choose nonadopter and count neighbor adopters
# for(i in 2011:2019){
#   proj_buffer <- proj %>% 
#     filter(Year == i) %>% 
#     filter(adopter == 1) %>% 
#     st_buffer(dist = 250) # 500m radius
#   
#   proj_point <- proj %>% 
#     filter(Year < i) %>% 
#     filter(adopter == 1) 
#   
#   # # to check buffer
#   # proj_buffer %>%
#   #   ggplot() +
#   #   geom_sf(fill = "white") +
#   #   geom_sf(data = proj_point, color = "red")
#   
#   proj_buffer$neighbor <- lengths(st_intersects(proj_buffer, proj_point)) # neighbor install counts per buffer
#   
#   # proj_point %>% 
#   #   ggplot() +
#   #   geom_sf(aes(color = neighbor)) 
#   
#   # count per cluster group
#   ns <- proj_buffer %>% 
#     st_drop_geometry() %>% 
#     group_by(cluster) %>% 
#     summarise(count = n()) 
#   
#   
#   # count <- ns$count
#   # names(count) <- ns$cluster
#   
#   count <- c('1'= ns$count[1], '2'= ns$count[2], '3' = ns$count[3], '4' = ns$count[4], '5' = ns$count[5])
#   
#   tp <- proj %>% 
#     filter(adopter == 0) 
#   
#   # sampling nonadopters 
#   set.seed(1119)
#   n_buffer <- mapply(sample_n, split(tp, tp$cluster), count, SIMPLIFY = FALSE) %>%
#     bind_rows() %>% 
#     st_buffer(dist = 250) # 500m radius
#   
#   n_buffer$neighbor <- lengths(st_intersects(n_buffer, proj_point))
#   
#   
#   dff <- rbind(proj_buffer, n_buffer) %>% 
#     mutate(Year = i) 
#   
#   if(i == 2011){
#     d <- dff
#     
#   }else{
#     d <- rbind(dff, d)
#   }
# } # cluster based sampling 
# 
# 
# d %>% 
#   st_drop_geometry() %>% 
#   group_by(cluster) %>% 
#   summarise(sum = sum(adopter))
# 
# d %>% 
#   st_drop_geometry() %>% 
#   mutate(adopter = factor(adopter)) %>% 
#   group_by(Year, adopter, cluster) %>% 
#   summarise(mean = mean(neighbor)) %>% 
#   ggplot() +
#   geom_line(aes(x = Year, y = mean, color = adopter))+
#   facet_wrap(~cluster)
# 
# d %>% 
#   st_drop_geometry() %>% 
#   mutate(adopter = factor(adopter)) %>% 
#   group_by(Year, adopter) %>% 
#   summarise(mean = mean(neighbor)) %>% 
#   ggplot() +
#   geom_line(aes(x = Year, y = mean, color = adopter))
# # based on cluster sampling, 
# 
# 
# ## Random
# # choose a year
# # count neighor adopters for each adopter
# # for cluster of each adopter, randomly choose nonadopter and count neighbor adopters
# for(i in 2011:2019){
#   proj_buffer <- proj %>% 
#     filter(Year == i) %>% 
#     filter(adopter == 1) %>% 
#     st_buffer(dist = 250) # 500m radius
#   
#   proj_point <- proj %>% 
#     filter(Year < i) %>% 
#     filter(adopter == 1) 
#   
#   # # to check buffer 
#   # proj_buffer %>% 
#   #   ggplot() +
#   #   geom_sf(fill = "white") +
#   #   geom_sf(data = proj_point, color = "red")
#   
#   proj_buffer$neighbor <- lengths(st_intersects(proj_buffer, proj_point))
#   
#   # proj_point %>% 
#   #   ggplot() +
#   #   geom_sf(aes(color = neighbor)) 
#   
#   
#   # sampling nonadopters 
#   set.seed(1119)
#   n_buffer <- proj %>% 
#     filter(adopter == 0) %>% 
#     sample_n(dim(proj_buffer)[1]) %>% 
#     st_buffer(dist = 250) # 500m radius
#   
#   n_buffer$neighbor <- lengths(st_intersects(n_buffer, proj_point))
#   
#   
#   dff <- rbind(proj_buffer, n_buffer) %>% 
#     mutate(Year = i) 
#   
#   if(i == 2011){
#     df2 <- dff
#     
#   }else{
#     df2 <- rbind(dff, df2)
#   }
# }
# 
# 
# df2 %>% 
#   st_drop_geometry() %>% 
#   group_by(cluster) %>% 
#   summarise(sum = sum(adopter))
# 
# df2 %>% 
#   st_drop_geometry() %>% 
#   mutate(adopter = factor(adopter)) %>% 
#   group_by(Year, adopter, cluster) %>% 
#   summarise(mean = mean(neighbor)) %>% 
#   ggplot() +
#   geom_line(aes(x = Year, y = mean, color = adopter))+
#   facet_wrap(~cluster)
# 
# df2 %>% 
#   st_drop_geometry() %>% 
#   mutate(adopter = factor(adopter)) %>% 
#   group_by(Year, adopter) %>% 
#   summarise(mean = mean(neighbor)) %>% 
#   ggplot() +
#   geom_line(aes(x = Year, y = mean, color = adopter))


## GEOID
# choose a year
# count neighor adopters for each adopter
# for GEOID of each adopter, randomly choose nonadopter and count neighbor adopters
for(j in c(50,100,150,200,250,300,400,500,700,1000)){
  
  for(i in 2011:2019){
    proj_buffer <- proj %>% # specific year installation buffers
      filter(Year == i) %>% 
      filter(adopter == 1) %>% 
      st_buffer(dist = j) # 500m radius
    
    proj_point <- proj %>% # previous total installation points
      filter(Year < i) %>% 
      filter(adopter == 1) 
    
    # # to check buffer 
    # proj_buffer %>%
    #   ggplot() +
    #   geom_sf(fill = "white") +
    #   geom_sf(data = proj_point, color = "red")
    
    proj_buffer$neighbor <- lengths(st_intersects(proj_buffer, proj_point)) # count intersected points
    
    # proj_point %>% 
    #   ggplot() +
    #   geom_sf(aes(color = neighbor)) 
    
    ns <- proj_buffer %>% # buffer count per GEOID
      st_drop_geometry() %>% 
      group_by(GEOID) %>% 
      summarise(count = n())
    
    count <- ns$count
    names(count) <- ns$GEOID
    
    tp <- proj %>% # filter only non adopters within the same GEOID
      filter(GEOID %in% ns$GEOID) %>% 
      filter(adopter == 0) 
    
    # sampling nonadopters 
    set.seed(11)
    n_buffer <- mapply(sample_n, split(tp, tp$GEOID), count, SIMPLIFY = FALSE) %>% # specific year non adopter buffers
      bind_rows() %>% 
      st_buffer(dist = j) # 500m radius
    
    n_buffer$neighbor <- lengths(st_intersects(n_buffer, proj_point)) # count intersected points
    
    
    dff <- rbind(proj_buffer, n_buffer) %>% 
      mutate(Year = i,
             Dist = j) 
    
    if(i == 2011 & j == 50){
      df1 <- dff
      
    }else{
      df1 <- rbind(dff, df1)
    }
  } 
  
}


df1 %>% 
  st_drop_geometry() %>% 
  group_by(GEOID) %>% 
  summarise(sum = sum(adopter))

df1 %>% 
  st_drop_geometry() %>% 
  mutate(adopter = factor(adopter)) %>% 
  group_by(Year, adopter, GEOID) %>% 
  summarise(mean = mean(neighbor)) %>% 
  ggplot() +
  geom_line(aes(x = Year, y = mean, color = adopter))+
  facet_wrap(~GEOID)

df1 %>% 
  st_drop_geometry() %>% 
  mutate(adopter = factor(adopter)) %>% 
  group_by(Year, adopter, cluster) %>% 
  summarise(mean = mean(neighbor)) %>% 
  ggplot() +
  geom_line(aes(x = Year, y = mean, color = adopter))+
  facet_wrap(~cluster)

df1 %>% 
  st_drop_geometry() %>% 
  mutate(adopter = factor(adopter)) %>% 
  group_by(Year, adopter, Dist) %>% 
  summarise(mean = mean(neighbor)) %>% 
  ggplot() +
  geom_line(aes(x = Year, y = mean, color = adopter)) +
  facet_wrap(~Dist, scale = "free")


df1 %>% 
  st_drop_geometry() %>% 
  mutate(adopter = factor(adopter)) %>% 
  group_by(Year, adopter, Dist) %>% 
  summarise(mean = mean(neighbor)) %>% 
  ggplot() +
  geom_line(aes(x = Dist, y = mean, color = adopter)) +
  facet_wrap(~Year, scale = "free")
# based on GEOID random sampling, peer effects are obvious.

# 
# # aggregate data 
# d.50 <- df %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))
# 
# d.200 <- df %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))
# 
# d.250 <- d %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))
# 
# d.300 <- df %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))
# 
# d.500 <- df %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))
# 
# d.1000 <- df %>% 
#   mutate(sample = "cluster") %>% 
#   rbind(df1 %>% mutate(sample = "GEOID")) %>% 
#   rbind(df2 %>% mutate(sample = "random"))

##################################################################################
# sampling based on GEOID
# dfPV <- df1
# dfEV <- df1
# dfPump <- df1

# save(d.50,d.200,d.250,d.300,d.500,d.1000,dfPV,dfEV, dfPump, s_house, file = "./data/diffusion.Rdata")