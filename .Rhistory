md <- c("Within tract sampling", "Across tract sampling")
for(i in 1:2){
if(i == 1){tf <- tfg }else{tf <- tfr}
fit <- glm(adopter ~ Year+Installed.Base+
PopDensity+HomeOwn+SingleFamily+Edu+HomeValue+Income+White+
Poverty+Gini,
family = "binomial", data = tf)
# summary(fit)
sims <- 1000
peGlm <- fit$coefficients
vcGlm <- vcov(fit)
simbetas <- mvrnorm(sims, peGlm, vcGlm) %>%
as.data.frame()
for(j in 1:11){
nei <- simbetas[,nm[j]]
pe <- exp(mean(nei))
upper <- quantile(nei, probs= 0.95) %>% exp()
lower <- quantile(nei, probs= 0.05) %>% exp()
tp <- cbind(pe,upper,lower) %>%
as.data.frame() %>%
mutate(var = nm[j],
model = md[i])
if(i == 1 & j == 1){
TP <- tp
}else{
TP <- rbind(tp,TP)
}
}
}
smp <- TP %>%
as.data.frame() %>%
mutate(var = factor(var, levels = nm),
model = factor(model, levels = md)) %>%
mutate(color = ifelse(upper > 1 & lower > 1, "Y",
ifelse(upper < 1 & lower < 1, "Y", "N")),
color = factor(color, levels = c("Y", "N"))) %>%
ggplot(aes(y = pe, x = reorder(var,pe), group = var)) +
geom_errorbar(aes(ymin=lower, ymax=upper),width = 0.1, size = 0.7) +
geom_point(aes(color = color), size = 2.8) +
geom_hline(yintercept = 1,linetype = "dotted", size = 1) +
coord_flip() +
facet_wrap(~model, scale = "free") +
labs(x = "", y ="Odds ratio",
title = "a") +
scale_color_manual(values = c("Y" = "red", "N" = "grey"),
# labels = c("N","Y"),
name = "Significance") +
theme_classic() +
theme(legend.position = "bottom")
smp1 <- d.200 %>%
st_drop_geometry() %>%
filter(sample != "cluster") %>%
mutate(adopter = ifelse(adopter == 0, "N", "Y"),
adopter = factor(adopter, levels = c("Y", "N")),
sample = ifelse(sample == "GEOID", "Within tract sampling", "Across tract sampling")) %>%
group_by(Year, cluster, adopter, sample) %>%
summarise(mean = mean(neighbor)) %>%
mutate(sample = factor(sample, levels = c("Within tract sampling", "Across tract sampling"))) %>%
ggplot(aes(x = Year, y = mean, color = adopter)) +
# geom_line() +
geom_smooth(aes(fill = adopter),alpha = 0.1, linewidth = 0.5) +
labs(x = "Year", y= "\nAverage number of \nneighboring installed \nhousing buildings\n",
color = "Adopter", fill = "Adopter",
title = "b") +
annotate("text", x=2012, y=2, label= "Within 200m",
hjust = 0) +
scale_x_continuous(breaks = c(2011,2015,2019)) +
facet_wrap(~sample, scale = "free") +
theme_classic() +
theme(legend.position = "bottom")
smp
smp1 <- d.200 %>%
st_drop_geometry() %>%
filter(sample != "cluster") %>%
mutate(adopter = ifelse(adopter == 0, "N", "Y"),
adopter = factor(adopter, levels = c("Y", "N")),
sample = ifelse(sample == "GEOID", "Within tract sampling", "Across tract sampling")) %>%
group_by(Year, cluster, adopter, sample) %>%
summarise(mean = mean(neighbor)) %>%
mutate(sample = factor(sample, levels = c("Within tract sampling", "Across tract sampling"))) %>%
ggplot(aes(x = Year, y = mean, color = adopter)) +
# geom_line() +
geom_smooth(aes(fill = adopter),alpha = 0.1, linewidth = 0.5) +
labs(x = "Year", y= "\nAverage number of \nneighboring installed \nhousing buildings\n",
color = "Adopter", fill = "Adopter",
title = "b") +
annotate("text", x=2012, y=2, label= "Within 200m",
hjust = 0) +
scale_x_continuous(breaks = c(2011,2015,2019)) +
facet_wrap(~sample, scale = "free") +
theme_classic() +
theme(legend.position = "bottom")
View(d.200)
smp1 <- d.200 %>%
st_drop_geometry() %>%
filter(sample != "cluster") %>%
mutate(adopter = ifelse(adopter == 0, "N", "Y"),
adopter = factor(adopter, levels = c("Y", "N")),
sample = ifelse(sample == "GEOID", "Within tract sampling", "Across tract sampling")) %>%
group_by(Year, adopter, sample) %>%
summarise(mean = mean(neighbor)) %>%
mutate(sample = factor(sample, levels = c("Within tract sampling", "Across tract sampling"))) %>%
ggplot(aes(x = Year, y = mean, color = adopter)) +
# geom_line() +
geom_smooth(aes(fill = adopter),alpha = 0.1, linewidth = 0.5) +
labs(x = "Year", y= "\nAverage number of \nneighboring installed \nhousing buildings\n",
color = "Adopter", fill = "Adopter",
title = "b") +
annotate("text", x=2012, y=2, label= "Within 200m",
hjust = 0) +
scale_x_continuous(breaks = c(2011,2015,2019)) +
facet_wrap(~sample, scale = "free") +
theme_classic() +
theme(legend.position = "bottom")
smp1
smp1 <- d.200 %>%
st_drop_geometry() %>%
filter(sample != "cluster") %>%
mutate(adopter = ifelse(adopter == 0, "N", "Y"),
adopter = factor(adopter, levels = c("Y", "N")),
sample = ifelse(sample == "GEOID", "Within tract sampling", "Across tract sampling"))
View(smp1)
### d.200, dfPV, dfEV, dfPump, dfVT, s_house, v_house,
### seattle_tracts, temp,
### PV, EV, Pump,VPV,
### tr.sf
load("../data/data.Rdata")
d.200 %>%
st_drop_geometry() %>%
filter(sample != "cluster") %>%
mutate(adopter = ifelse(adopter == 0, "N", "Y"),
adopter = factor(adopter, levels = c("Y", "N")),
sample = ifelse(sample == "GEOID", "Within tract sampling", "Across tract sampling")) %>%
group_by(Year, cluster, adopter, sample) %>%
summarise(mean = mean(neighbor)) %>%
mutate(sample = factor(sample, levels = c("Within tract sampling", "Across tract sampling"))) %>%
ggplot(aes(x = Year, y = mean, color = adopter)) +
# geom_line() +
geom_smooth(aes(fill = adopter),alpha = 0.1, linewidth = 0.5) +
labs(x = "Year", y= "\nAverage number of \nneighboring installed \nhousing buildings\n",
color = "Adopter", fill = "Adopter",
title = "b") +
annotate("text", x=2012, y=2, label= "Within 200m",
hjust = 0) +
scale_x_continuous(breaks = c(2011,2015,2019)) +
facet_wrap(~sample, scale = "free") +
theme_classic() +
theme(legend.position = "bottom")
### S1
# point clustering analysis
# Clark and Evans test aggregation index R
as.ppp(PV[,c(6,7)], W= owin(c(min(PV$Lon), max(PV$Lon)), c(min(PV$Lat), max(PV$Lat)))) %>%
clarkevans.test
names(PV)
### S1
# point clustering analysis
# Clark and Evans test aggregation index R
as.ppp(PV[,c(2,3)], W= owin(c(min(PV$Lon), max(PV$Lon)), c(min(PV$Lat), max(PV$Lat)))) %>%
clarkevans.test
as.ppp(EV[,c(2,3)], W= owin(c(min(EV$Lon), max(EV$Lon)), c(min(EV$Lat), max(EV$Lat)))) %>%
clarkevans.test
as.ppp(Pump[,c(2,3)], W= owin(c(min(Pump$Lon), max(Pump$Lon)), c(min(Pump$Lat), max(Pump$Lat)))) %>%
clarkevans.test
as.ppp(VPV[,c(2,3)], W= owin(c(min(VPV$Lon), max(VPV$Lon)), c(min(VPV$Lat), max(VPV$Lat)))) %>%
clarkevans.test
as.ppp(PV[,c(2,3)], W= owin(c(min(PV$Lon), max(PV$Lon)), c(min(PV$Lat), max(PV$Lat)))) %>%
envelope(fun= Gest, nrank= 2, nsim= 99, verbose = F) %>% plot(main = "PV (Seattle)",ylab="", xlab="Distance (r)",
cex.lab=1.5, cex.axis=1.5, cex.main=2, cex.sub=1.5)
as.ppp(VPV[,c(2,3)], W= owin(c(min(VPV$Lon), max(VPV$Lon)), c(min(VPV$Lat), max(VPV$Lat)))) %>%
envelope(fun= Gest, nrank= 2, nsim= 99, verbose = FALSE) %>% plot(main = "PV (Vermont)",ylab="", xlab="Distance (r)",
cex.lab=1.5, cex.axis=1.5, cex.main=2, cex.sub=1.5)
as.ppp(EV[,c(2,3)], W= owin(c(min(EV$Lon), max(EV$Lon)), c(min(EV$Lat), max(EV$Lat)))) %>%
envelope(fun= Gest, nrank= 2, nsim= 99, verbose = F) %>% plot(main = "EV (Seattle)",ylab="", xlab="Distance (r)",
cex.lab=1.5, cex.axis=1.5, cex.main=2, cex.sub=1.5)
as.ppp(Pump[,c(2,3)], W= owin(c(min(Pump$Lon), max(Pump$Lon)), c(min(Pump$Lat), max(Pump$Lat)))) %>%
envelope(fun= Gest, nrank= 2, nsim= 99, verbose = F) %>% plot(main = "HP (Seattle)",ylab="", xlab="Distance (r)",
cex.lab=1.5, cex.axis=1.5, cex.main=2, cex.sub=1.5)
### S2
### DAC
var <- DAC %>%
dplyr::select(GEOID, disadvantaged:`poverty level`)
nm <- names(var)[-1]
group <- list(dfPV,dfVT, dfEV,dfPump)
g <-  c("PV (Seattle)", "PV (Vermont)", "EV (Seattle)", "HP (Seattle)")
data <- data.frame()
for(i in 1:length(group)){
if(i == 2){
dat <- tr.sf %>%
rename(GEOID = FIPS) %>%
filter(STATE_FIPS == "50") %>%
dplyr::select(GEOID) %>%
left_join(var, by = "GEOID") %>%
st_transform(32618) %>%
dplyr::select(-GEOID) %>%
st_join(
dfVT %>%
group_by(GEOID) %>%
summarise(N = n()), join = st_intersects, largest = TRUE) %>%
mutate_at(c("N"), ~replace_na(.,0)) %>%   # replace NA with 0
st_drop_geometry() %>%
dplyr::select(GEOID, everything())
}else{
dat <- tr.sf %>%
rename(GEOID = FIPS) %>%
filter(STATE_FIPS == "53") %>%
dplyr::select(GEOID) %>%
left_join(var, by = "GEOID") %>%
st_transform(32610) %>%
dplyr::select(-GEOID) %>%
st_join(
group[[i]] %>%
group_by(GEOID) %>%
summarise(N = n()), join = st_intersects, largest = TRUE) %>%
mutate_at(c("N"), ~replace_na(.,0)) %>%   # replace NA with 0
st_drop_geometry() %>%
dplyr::select(GEOID, everything())
}
da <- data.frame()
for(j in 2:(length(colnames(dat))-1)){
d <- dat %>%
group_by(get(colnames(dat)[j])) %>%
summarise(value = sum(N)) %>%
mutate(sum = sum(value),
perc = value/sum*100)
d<- d[2,]
da <- rbind(d,da)
}
da <- da %>%
cbind(data.frame(var = rev(colnames(dat))[c(-1,-32)])) %>%
mutate(type = g[i])
data <- rbind(da, data)
}
lab <- c("Workforce","Health", "Waster\nwater", "Pollution",
"Housing", "Transpor\ntation", "Energy", "Climate")
jst <- data %>%
mutate_at(c("perc"), ~replace_na(.,0)) %>%
mutate(var = factor(var, levels = nm),
class = ifelse(var == nm[1], "total",
ifelse(var %in% nm[27:30], "education", "income")),
cat = ifelse(var == nm[1], "Community",
ifelse(var %in% nm[2:6], lab[8],
ifelse(var %in% nm[7:8], lab[7],
ifelse(var %in% nm[9:11], lab[6],
ifelse(var %in% nm[12:15], lab[5],
ifelse(var %in% nm[16:20], lab[4],
ifelse(var %in% nm[21:22], lab[3],
ifelse(var %in% nm[23:26], lab[2], lab[1])))))))),
color = cut(perc, breaks = c(0,3,6,10), include.lowest = T),
tot = ifelse(class == "total", 10.7, 9.1))
# library(lemon)
f1 <- jst %>%
mutate(type = factor(type, levels = g)) %>%
filter(class == "total") %>%
mutate(var = "     disadvantaged",
cat = "Combined\ncommunity") %>%
ggplot() +
geom_col(aes(x = tot, y = var), fill = "gray", position = "dodge", width = 0.5) +
geom_col(aes(x = perc, y = var),  fill = "gray20", position = "dodge", width = 0.5) +
labs(x = "", y = "\n\n\n\n\n\n\n", fill = "") +
facet_grid(cat+class ~type, scales = "free", space = "free", switch = "y") +
geom_text(aes(x = perc-2, y = 1, label = paste0(round(perc, 0),"%")),
size = 2, color = "white") +
theme_classic() +
theme(legend.position = "none",
strip.text.y = element_text(size = 6))
f1
# cols <- hue_pal()(3)
f2 <- jst %>%
mutate(type = factor(type, levels = g)) %>%
filter(class != "total") %>%
ggplot() +
geom_col(aes(x = tot, y = var), fill = "gray", position = "dodge", width = 0.9) +
geom_col(aes(x = perc, y = var, fill = color), position = "dodge", width = 0.9) +
labs(x = "", y = "", fill = "") +
scale_fill_viridis_d(begin = 0.2, end = 0.95) +
facet_grid(cat+class ~type, scales = "free", space = "free", switch = "y") +
theme_classic() +
theme(legend.position = "bottom",
strip.text.y = element_text(size = 6))
f2
### s3
# by neighbor and Dist
df <- list(dfPV,dfVT, dfEV,dfPump)
tch <- c("PV (Seattle)", "PV (Vermont)", "EV (Seattle)",
"HP (Seattle)")
TP <- data.frame()
for(j in 1:4){
for(i in c(100,250,500)){
tf <- df[[j]] %>%
st_drop_geometry() %>%
filter(Dist == i)
fit <- glm(adopter ~ neighbor, family = "binomial", data = tf)
# summary(fit)
nei <- seq(0, 10, by = 1)
year <- rep(2019, length(nei))
cons <- rep(1, length(nei))
x <- cbind(cons, nei) %>%
as.matrix()
sims <- 1000
pe <- fit %>% tidy() %>% dplyr::select(estimate) %>% as.matrix()
peGlm <- pe[1:2]
vcGlm <- vcov(fit)
simbetas <- mvrnorm(sims, peGlm, vcGlm) %>%
as.data.frame()
xbeta <- x %*% t(simbetas)
inverse.logit <- function(xb){
1/(1+exp(-xb))}
prob <-
inverse.logit(xbeta)
pe <- apply(prob, 1, mean)
upper <- apply(prob, 1, quantile, probs= 0.95)
lower <- apply(prob, 1, quantile, probs= 0.05)
tp <- cbind(x,pe,upper,lower) %>%
as.data.frame() %>%
mutate(Dist = i,
tech = tch[j])
TP <- rbind(tp,TP)
}
}
# nei
s3 <- TP %>%
as.data.frame() %>%
mutate(tech = factor(tech, levels = c("PV (Seattle)", "PV (Vermont)",
"EV (Seattle)", "HP (Seattle)"))) %>%
mutate_at(vars(pe,upper,lower), funs(.*100-50)) %>%
ggplot(aes(x = nei, y = pe, ymax = upper, ymin = lower, fill = factor(Dist))) +
geom_line(aes(color = factor(Dist))) +
geom_ribbon(alpha = 0.1, linetype = 0) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(y = "Probability of adoption\nrelative to non-adopters (%)", x = "Number of neighbor installations", color = "Distance (m)", fill = "Distance (m)") +
scale_x_continuous(breaks = 0:10) +
facet_wrap(~tech, nrow = 1) +
theme_classic()+
theme(
panel.background = element_rect(fill = NA),
axis.line.x.bottom = element_line(size = 0.5),
axis.ticks.length = unit(0.5, "char"),
legend.position = "bottom",
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
s3
# by neighbor and year
for(i in seq(2011,2019, by = 2)){
tf <- df[[1]] %>%
filter(Year == i)
fit <- glm(adopter ~ neighbor + Dist, family = "binomial", data = tf)
# summary(fit)
nei <- seq(0, 10, by = 1)
rad <- rep(250, length(nei))
cons <- rep(1, length(nei))
x <- cbind(cons, nei, rad)
sims <- 1000
peGlm <- fit$coefficients
vcGlm <- vcov(fit)
simbetas <- mvrnorm(sims, peGlm, vcGlm)
xbeta <- x %*% t(simbetas)
inverse.logit <- function(xb){
1/(1+exp(-xb))
prob <-
inverse.logit(xbeta)
pe <- apply(prob, 1, mean)
upper <- apply(prob, 1, quantile, probs= 0.95)
lower <- apply(prob, 1, quantile, probs= 0.05)
tp <- cbind(x,pe,upper,lower) %>%
as.data.frame() %>%
mutate(year = i)
if(i == 2011){
TP <- tp
}else{
TP <- rbind(tp,TP)
}
}
}
# year
TP %>%
as.data.frame() %>%
ggplot(aes(x = nei, y = pe, ymax = upper, ymin = lower, fill = factor(year))) +
geom_line(aes(color = factor(year))) +
geom_ribbon(alpha = 0.07, linetype = 0) +
labs(y = "Probability", x = "Number of neighbor installation", color = "Year", fill = "Year") +
scale_x_continuous(breaks = 0:10) +
annotate("text", x=0.35, y=0.5, label= "Dist = 250m",
hjust = 0) +
theme(
panel.background = element_rect(fill = NA),
axis.line.x.bottom = element_line(size = 0.5),
axis.ticks.length = unit(0.5, "char"),
legend.position = c(0.13,0.8),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
### s4
# define df for the technologies to analyze.
df <- list(dfPV,dfVT, dfEV,dfPump)
tch <- c("PV (Seattle)", "PV (Vermont)", "EV (Seattle)",
"HP (Seattle)")
TP <- data.frame()
for(j in 1:4){
ff <- df[[j]] %>%
st_drop_geometry()
for(i in unique(df[[j]]$Dist)){
tf <- ff %>%
filter(Dist == i) %>%
mutate_at(vars(neighbor), funs(scale(.) %>% as.numeric())) %>%
mutate(Year = factor(Year))
fit <- glmer(adopter ~ neighbor + (1| Year), family = "binomial", data = tf)
sims <- 1000
pe <- fit %>% tidy() %>% dplyr::select(estimate) %>% as.matrix()
peGlm <- pe[1:2]
vcGlm <- vcov(fit)
simbetas <- mvrnorm(sims, peGlm, vcGlm) %>%
as.data.frame()
nei <- simbetas$neighbor
pe <- exp(mean(nei))
upper <- quantile(nei, probs= 0.95) %>% exp()
lower <- quantile(nei, probs= 0.05) %>% exp()
tp <- cbind(pe,upper,lower) %>%
as.data.frame() %>%
mutate(Dist = i,
tech = tch[j])
TP <- rbind(tp,TP)
}
}
s4 <- TP %>%
as.data.frame() %>%
mutate(tech = factor(tech, levels = tch)) %>%
ggplot(aes(x = Dist, y = pe)) +
geom_point() +
geom_line() +
geom_errorbar( aes(x=Dist, ymin=lower, ymax=upper), width=10, colour="red", alpha=0.5, size=1) +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_vline(xintercept  = 505.4,
linetype="dotdash", size=1) +
geom_vline(data = TP %>%
as.data.frame() %>%
mutate(tech = factor(tech, levels = tch)) %>%
filter(tech == "PV (Vermont)"), aes(xintercept  = 4030),
linetype="dotted", size=1) +
labs(title = "", y = "Installed based odds ratios (standardized)", x = "Distance (m)") +
facet_wrap(~tech, nrow = 4, switch = "y", scale = "free") +
theme_minimal() +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
s4
### S5
mp_gen <- function(variable){
lv <- c("L","M","H")
num <- 3
se <- seattle_tracts %>%
mutate_at(vars(HomeOwn,Income,Edu), funs(rescale(., to=c(0,1)))) %>%
mutate(ic = ifelse(get(variable) > quantile(get(variable), 0.8) , "H",
ifelse(get(variable) > quantile(get(variable), 0.2), "M","L")),
ic = factor(ic, levels = lv))
ve <- temp %>%
mutate_at(vars(HomeOwn,Income,Edu), funs(rescale(., to=c(0,1)))) %>%
mutate(ic = ifelse(get(variable) > quantile(get(variable), 0.8) , "H",
ifelse(get(variable) > quantile(get(variable), 0.2), "M","L")),
ic = factor(ic, levels = lv))
return(list(se,ve))
}
m1 <- mp_gen("HomeOwn")[[1]] %>%
ggplot() +
geom_sf(aes(fill = ic), color = "gray50", alpha = 0.5) + # border
scale_fill_viridis_d(direction = -1) +
labs(fill = "", title = "Homeownership") +
theme_minimal() +
theme(plot.title = element_text(size=10),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none")
m1
### t1
seattle_tracts %>%
st_drop_geometry() %>%
dplyr::select(-Area) %>%
stargazer(type = "text")
### t2
temp %>%
st_drop_geometry() %>%
dplyr::select(HomeOwn,Edu,Income) %>%
mutate_all(funs(./100)) %>%
as.data.frame() %>%
stargazer(type = "text")
fit <- glm(adopter ~ Year+Installed.Base+
PopDensity+HomeOwn+SingleFamily+Edu+HomeValue+Income+White+
Poverty+Gini,
family = "binomial", data = tfg)
fit1 <- glm(adopter ~ Year+Installed.Base+
PopDensity+HomeOwn+SingleFamily+Edu+HomeValue+Income+White+
Poverty+Gini,
family = "binomial", data = tfr)
stargazer(fit, fit1, type = "text",
header = FALSE,  # For no message from the author
title = "",
model.numbers=FALSE,
# column.labels = c("SAR",'',"SAR",'','SAR',''),
single.row = F,
no.space = TRUE, # to remove the spaces after each line of coefficients
omit = c("Constant"),
column.sep.width = "0pt", # to reduce column width
font.size = "small", # to make font size smaller
omit.stat=c("rsq","ser","f","AIC","ll","sigma2","wald","adj.rsq","theta"),
add.lines=list(c('Akaike Inf. Crit.',round(AIC(fit),1),
round(AIC(fit1),1))),
label = "tab:t42")
temp
seattle_tracts
